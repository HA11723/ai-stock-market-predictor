name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          docker build -t ai-stock-predictor-backend ./backend

      - name: Run backend tests
        run: |
          docker run --rm ai-stock-predictor-backend python -m pytest tests/ -v

      - name: Run backend tests with coverage
        run: |
          docker run --rm ai-stock-predictor-backend python -m pytest tests/ --cov=. --cov-report=term-missing

      - name: Test API endpoints
        run: |
          # Start the backend service
          docker run -d --name test-backend -p 5000:5000 ai-stock-predictor-backend
          sleep 10

          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1

          # Test available tickers endpoint
          curl -f http://localhost:5000/api/available-tickers || exit 1

          # Clean up
          docker stop test-backend
          docker rm test-backend

  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --watchAll=false --coverage

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Build frontend Docker image
        run: |
          docker build -t ai-stock-predictor-frontend ./frontend

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, build-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test full stack
        run: |
          # Build images
          docker build -t ai-stock-predictor-backend ./backend
          docker build -t ai-stock-predictor-frontend ./frontend

          # Start services
          docker-compose up -d

          # Wait for services to be ready
          sleep 30

          # Test backend API
          curl -f http://localhost:5000/health || exit 1
          curl -f http://localhost:5000/api/available-tickers || exit 1

          # Test frontend is accessible
          curl -f http://localhost:3000 || exit 1

          # Clean up
          docker-compose down

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ai-stock-predictor-backend
          args: --severity-threshold=high

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install linting tools
        run: |
          pip install flake8 black isort

      - name: Run linting checks
        run: |
          # Check Python code style
          flake8 backend/ --max-line-length=88 --extend-ignore=E203,W503
          black --check backend/
          isort --check-only backend/

      - name: Check frontend linting
        working-directory: ./frontend
        run: |
          npm ci
          npm run lint
